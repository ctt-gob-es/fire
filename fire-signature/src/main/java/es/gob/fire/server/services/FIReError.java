package es.gob.fire.server.services;

import es.gob.fire.i18n.IErrorMessages;
import es.gob.fire.i18n.Language;

/**
 * Errores que pueden darse en FIRe.
 * @author carlos.gamuci
 */
public enum FIReError {

	// Errores de la peticion que devuelven informacion significativa

	READING_PARAMETERS(1, 400, IErrorMessages.READING_PARAMETERS),
	PARAMETER_APP_ID_NEEDED(2, 400, IErrorMessages.PARAMETER_APP_ID_NEEDED),
	PARAMETER_OPERATION_NEEDED(3, 400, IErrorMessages.PARAMETER_OPERATION_NEEDED),
	PARAMETER_OPERATION_NOT_SUPPORTED(5, 400, IErrorMessages.PARAMETER_OPERATION_NOT_SUPPORTED),
	PARAMETER_AUTHENTICATION_CERTIFICATE_NEEDED(6, 400, IErrorMessages.PARAMETER_AUTHENTICATION_CERTIFICATE_NEEDED),
	PARAMETER_AUTHENTICATION_CERTIFICATE_INVALID(7, 400, IErrorMessages.PARAMETER_AUTHENTICATION_CERTIFICATE_INVALID),
	PARAMETER_USER_ID_NEEDED(8, 400, IErrorMessages.PARAMETER_USER_ID_NEEDED),
	PARAMETER_SIGNATURE_ALGORITHM_NEEDED(9, 400, IErrorMessages.PARAMETER_SIGNATURE_ALGORITHM_NEEDED),
	PARAMETER_SIGNATURE_OPERATION_NEEDED(10, 400, IErrorMessages.PARAMETER_SIGNATURE_OPERATION_NEEDED),
	PARAMETER_SIGNATURE_FORMAT_NEEDED(11, 400, IErrorMessages.PARAMETER_SIGNATURE_FORMAT_NEEDED),
	PARAMETER_DATA_TO_SIGN_NEEDED(12, 400, IErrorMessages.PARAMETER_DATA_TO_SIGN_NEEDED),
	PARAMETER_DATA_TO_SIGN_INVALID(13, 400, IErrorMessages.PARAMETER_DATA_TO_SIGN_INVALID),
	PARAMETER_DATA_TO_SIGN_NOT_FOUND(14, 404, IErrorMessages.PARAMETER_DATA_TO_SIGN_NOT_FOUND),
	PARAMETER_CONFIG_TRANSACTION_NEEDED(15, 400, IErrorMessages.PARAMETER_CONFIG_TRANSACTION_NEEDED),
	PARAMETER_CONFIG_TRANSACTION_INVALID(16, 400, IErrorMessages.PARAMETER_CONFIG_TRANSACTION_INVALID),
	PARAMETER_URL_ERROR_REDIRECION_NEEDED(17, 400, IErrorMessages.PARAMETER_URL_ERROR_REDIRECTION_NEEDED),
	PARAMETER_TRANSACTION_ID_NEEDED(18, 400, IErrorMessages.PARAMETER_TRANSACTION_ID_NEEDED),
	PARAMETER_SIGNATURE_PARAMS_INVALID(20, 400, IErrorMessages.PARAMETER_SIGNATURE_PARAMS_INVALID),
	UNKNOWN_USER(21, 400, IErrorMessages.UNKNOWN_USER),
	CERTIFICATE_DUPLICATED(22, 500, IErrorMessages.CERTIFICATE_DUPLICATED),
	CERTIFICATE_ERROR(23, 500, IErrorMessages.CERTIFICATE_ERROR),
	CERTIFICATE_WEAK_REGISTRY(24, 500, IErrorMessages.CERTIFICATE_WEAK_REGISTRY),
	UNDEFINED_ERROR(25, 500, IErrorMessages.UNDEFINED_ERROR),
	SIGNING(26, 500, IErrorMessages.SIGNING),
	PROVIDER_NOT_SELECTED(27, 400, IErrorMessages.PROVIDER_NOT_SELECTED),
	INVALID_SIGNATURE(31, 500, IErrorMessages.INVALID_SIGNATURE),
	UPGRADING_SIGNATURE(32, 500, IErrorMessages.UPGRADING_SIGNATURE),
	PARAMETER_ASYNC_ID_NEEDED(34, 400, IErrorMessages.PARAMETER_ASYNC_ID_NEEDED),
	PARAMETER_DOCUMENT_MANAGER_INVALID(35, 400, IErrorMessages.PARAMETER_DOCUMENT_MANAGER_INVALID),
	CERTIFICATE_BLOCKED(38, 500, IErrorMessages.CERTIFICATE_BLOCKED),
	CERTIFICATE_NO_CERTS(39, 500, IErrorMessages.CERTIFICATE_NO_CERTS),
	BATCH_DUPLICATE_DOCUMENT(42, 400, IErrorMessages.BATCH_DUPLICATE_DOCUMENT),
	BATCH_NUM_DOCUMENTS_EXCEEDED(43, 400, IErrorMessages.BATCH_NUM_DOCUMENTS_EXCEEDED),
	BATCH_NO_DOCUMENTS(44, 400, IErrorMessages.BATCH_NO_DOCUMENTS),
	PARAMETER_DOCUMENT_ID_NEEDED(48, 400, IErrorMessages.PARAMETER_DOCUMENT_ID_NEEDED),
	BATCH_NO_SIGNED(49, 500, IErrorMessages.BATCH_NO_SIGNED),
	BATCH_SIGNING(50, 500, IErrorMessages.BATCH_SIGNING),
	BATCH_RECOVERED(51, 500, IErrorMessages.BATCH_RECOVERED),
	BATCH_DOCUMENT_GRACE_PERIOD(52, 500, IErrorMessages.BATCH_DOCUMENT_GRACE_PERIOD),
	BATCH_INVALID_DOCUMENT(53, 500, IErrorMessages.BATCH_INVALID_DOCUMENT),
	BATCH_RESULT_RECOVERED(54, 500, IErrorMessages.BATCH_RESULT_RECOVERED),
	PARAMETER_PROVIDERS_INVALID(55, 400, IErrorMessages.PARAMETER_PROVIDERS_INVALID),
	PARAMETER_DOCUMENT_ID_INVALID(56, 400, IErrorMessages.PARAMETER_DOCUMENT_ID_INVALID),


	// Errores que no devuelven informacion significativa a la aplicacion
	INTERNAL_ERROR(500, 500, IErrorMessages.INTERNAL_ERROR),
	FORBIDDEN(501, 403, IErrorMessages.FORBIDDEN),
	UNAUTHORIZED(502, 401, IErrorMessages.UNAUTHORIZED),
	INVALID_TRANSACTION(503, 403, IErrorMessages.INVALID_TRANSACTION),
	EXTERNAL_SERVICE_ERROR_TO_LOGIN(504, 500, IErrorMessages.EXTERNAL_SERVICE_ERROR_TO_LOGIN),
	EXTERNAL_SERVICE_ERROR_TO_SIGN(505, 500, IErrorMessages.EXTERNAL_SERVICE_ERROR_TO_SIGN),
	EXTERNAL_SERVICE_ERROR(506, 500, IErrorMessages.EXTERNAL_SERVICE_ERROR),
	OPERATION_CANCELED(507, 400, IErrorMessages.OPERATION_CANCELED),
	PROVIDER_ERROR(508, 500, IErrorMessages.PROVIDER_ERROR),
	PROVIDER_INACCESIBLE_SERVICE(510, 500, IErrorMessages.PROVIDER_INACCESIBLE_SERVICE),
	;


	int code;
	int httpStatus;
	String message;

	FIReError(final int code, final int httpStatus, final String message) {
		this.code = code;
		this.httpStatus = httpStatus;
		this.message = message;
	}

	/**
	 * Recupera el c&oacute;digo del error.
	 * @return C&oacute;digo de error.
	 */
	public int getCode() {
		return this.code;
	}

	/**
	 * Recupera el c&oacute;digo de estado HTTP.
	 * @return C&oacute;digo de estado HTTP.
	 */
	public int getHttpStatus() {
		return this.httpStatus;
	}

	/**
	 * Recupera el mensaje de error.
	 * @return Mensaje de error.
	 */
	public String getMessage() {
		return Language.getResFireSignature(this.message);
	}
	
	public static FIReError getByCode(final int code) {
		for (final FIReError error : FIReError.values()) {
			if (error.getCode() == code) {
				return error;
			}
		}
		return null;
	}

}

